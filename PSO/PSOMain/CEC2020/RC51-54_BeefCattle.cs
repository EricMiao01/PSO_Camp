using System;
using System.Security.Cryptography;
using PSOLib;

public class RC51 : Problem
{
    double[] costs = { 2.0000000e+02,   1.5000000e+02,   4.0000000e+02,   3.5000000e+02,   1.5000000e+02,   1.5000000e+02,   1.7000000e+02,
                       6.0000000e+02,   4.0000000e+02,   2.0000000e+02,   5.0000000e+02,   2.0000000e+02,   2.0000000e+02,   1.5000000e+02,
                       4.5000000e+02,   1.5000000e+02,   1.4000000e+02,   7.0000000e+01,   3.0000000e+01,   3.0000000e+01,   7.0000000e+01,
                       1.0000000e+02,   9.0000000e+01,   7.0000000e+01,   2.5000000e+02,   9.0000000e+01,   7.0000000e+01,   1.0000000e+02,
                       2.5000000e+02,   2.5000000e+02,   7.0000000e+01,   5.0000000e+01,   1.1000000e+02,   5.0000000e+02,   4.0000000e+02,
                       3.0000000e+02,   4.0000000e+02,   6.0000000e+02,   3.0000000e+02,   6.0000000e+02,   5.0000000e+02,   4.0000000e+02,
                       3.0000000e+02,   4.2000000e+02,   5.0000000e+02,   6.0000000e+02,   5.0000000e+02,   3.0000000e+02,   5.0000000e+02,
                       5.0000000e+02,   3.1200000e+02,   1.0000000e+03,   6.0000000e+02,   1.2000000e+03,   8.5000000e+02,   5.0000000e+01,
                       2.0000000e+03,   8.8000000e+02,   2.5000000e+02 };
    double[,] kg = new double[6, 59]
        {
            { 6.0000000e-01, 9.1200000e-01, 8.9910000e-01, 9.1770000e-01, 8.7600000e-01, 3.6700000e-01, 2.9100000e-01, 9.0660000e-01, 8.8110000e-01, 2.9600000e-01, 8.9560000e-01, 8.9400000e-01, 2.2480000e-01, 8.5560000e-01, 9.0110000e-01, 6.0000000e-01, 3.2900000e-01, 1.2980000e-01, 6.0100000e-02, 3.7920000e-01, 2.6240000e-01, 3.7490000e-01, 4.0200000e-01, 4.4220000e-01, 6.2380000e-01, 4.0000000e-01, 1.9720000e-01, 2.0850000e-01, 8.8250000e-01, 8.9960000e-01, 2.5000000e-01, 1.7500000e-01, 5.9620000e-01, 8.7000000e-01, 8.8980000e-01, 9.2280000e-01, 6.4370000e-01, 8.8120000e-01, 9.0430000e-01, 8.9950000e-01, 8.8880000e-01, 8.9380000e-01, 9.1390000e-01, 8.8000000e-01, 8.7520000e-01, 8.9060000e-01, 8.8260000e-01, 8.7780000e-01, 8.3790000e-01, 8.6180000e-01, 8.7310000e-01, 9.2070000e-01, 9.5000000e-01, 8.6500000e-01, 9.7600000e-01, 9.7600000e-01, 9.5000000e-01, 9.9000000e-01, 9.5000000e-01 },
            { 4.0000000e-01, 8.8000000e-02, 1.0090000e-01, 8.2300000e-02, 1.2400000e-01, 6.3300000e-01, 7.0900000e-01, 9.3400000e-02, 1.1890000e-01, 7.0400000e-01, 1.0440000e-01, 1.0660000e-01, 7.7520000e-01, 1.4440000e-01, 9.8900000e-02, 4.0000000e-01, 6.7100000e-01, 8.7020000e-01, 9.3990000e-01, 6.2080000e-01, 7.3760000e-01, 6.2510000e-01, 5.9800000e-01, 5.5780000e-01, 3.7620000e-01, 6.0000000e-01, 8.0280000e-01, 7.9150000e-01, 1.1750000e-01, 1.0040000e-01, 7.5000000e-01, 8.2500000e-01, 4.0380000e-01, 1.3000000e-01, 1.1020000e-01, 7.7200000e-02, 3.5630000e-01, 1.1880000e-01, 9.5700000e-02, 1.0050000e-01, 1.1120000e-01, 1.0620000e-01, 8.6100000e-02, 1.2000000e-01, 1.2480000e-01, 1.0940000e-01, 1.1740000e-01, 1.2220000e-01, 1.6210000e-01, 1.3820000e-01, 1.2690000e-01, 7.9300000e-02, 5.0000000e-02, 1.3500000e-01, 2.4000000e-02, 2.4000000e-02, 5.0000000e-02, 1.0000000e-02, 5.0000000e-02 },
            { 2.9400000e-01, 4.7820000e-01, 5.5960000e-01, 4.1930000e-01, 4.1120000e-01, 2.2390000e-01, 1.7460000e-01, 5.2590000e-01, 5.0220000e-01, 1.5970000e-01, 5.1050000e-01, 2.7480000e-01, 1.4390000e-01, 3.6060000e-01, 5.4970000e-01, 3.6600000e-01, 2.0070000e-01, 1.0840000e-01, 4.7400000e-02, 2.2800000e-01, 1.8630000e-01, 1.7250000e-01, 1.8490000e-01, 2.2110000e-01, 5.0530000e-01, 3.2400000e-01, 1.5970000e-01, 1.5850000e-01, 7.6780000e-01, 8.6500000e-01, 1.2630000e-01, 1.2730000e-01, 3.7560000e-01, 7.2000000e-01, 7.0000000e-01, 7.3000000e-01, 4.8000000e-01, 7.6000000e-01, 5.7000000e-01, 8.5000000e-01, 7.4000000e-01, 6.1000000e-01, 4.0000000e-01, 7.2000000e-01, 7.4000000e-01, 8.5000000e-01, 7.4000000e-01, 6.5000000e-01, 7.2000000e-01, 7.8000000e-01, 7.8000000e-01, 7.7160000e-01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00 },
            { 2.4900000e-02, 4.0600000e-02, 1.2460000e-01, 4.5400000e-02, 5.1000000e-02, 3.3800000e-02, 1.8500000e-02, 1.6040000e-01, 4.6100000e-02, 2.4000000e-02, 7.9000000e-02, 4.7700000e-02, 2.6200000e-02, 4.8300000e-02, 8.5600000e-02, 1.4020000e-01, 7.6900000e-02, 1.1200000e-02, 3.5000000e-03, 1.7600000e-02, 5.5500000e-02, 4.0900000e-02, 5.3200000e-02, 4.1400000e-02, 2.1700000e-01, 9.4500000e-02, 4.6600000e-02, 8.3000000e-03, 1.3080000e-01, 1.2660000e-01, 8.6600000e-02, 6.6600000e-02, 3.4600000e-02, 1.2000000e-01, 9.0000000e-02, 2.0000000e-01, 5.0000000e-02, 4.6000000e-01, 9.0000000e-02, 3.0000000e-01, 2.8000000e-01, 3.6000000e-01, 8.0000000e-02, 1.4000000e-01, 1.1000000e-01, 9.0000000e-02, 1.1000000e-01, 1.5000000e-01, 9.0000000e-02, 7.0000000e-02, 7.0000000e-02, 4.4300000e-01, 2.8100000e+00, 1.3940000e-01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00 },
            { 2.3000000e-03, 3.0000000e-03, 2.0000000e-03, 2.8000000e-03, 3.5000000e-03, 2.7000000e-03, 2.4000000e-03, 1.2600000e-02, 2.3000000e-03, 5.2000000e-03, 1.2000000e-03, 4.0000000e-03, 2.0000000e-04, 1.0800000e-02, 4.8000000e-03, 1.0600000e-02, 5.8000000e-03, 2.0000000e-04, 2.6000000e-03, 1.0000000e-04, 6.0000000e-04, 8.1000000e-03, 7.0000000e-03, 1.2000000e-02, 1.5000000e-03, 3.4000000e-03, 1.7000000e-03, 8.0000000e-04, 8.0000000e-04, 3.0000000e-04, 1.0000000e-04, 2.0000000e-04, 6.4000000e-03, 1.8000000e-03, 1.1000000e-03, 1.3000000e-03, 3.6000000e-03, 3.5000000e-03, 5.3000000e-03, 2.8000000e-03, 1.4000000e-03, 2.1000000e-03, 4.4000000e-03, 6.0000000e-03, 6.0000000e-04, 3.6000000e-03, 5.0000000e-04, 1.0000000e-03, 6.0000000e-04, 2.0000000e-04, 7.0000000e-04, 1.3000000e-03, 0.0000000e+00, 3.0000000e-04, 3.1000000e-01, 3.7000000e-01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00 },
            { 1.2000000e-03, 2.0000000e-04, 2.8000000e-03, 1.3000000e-03, 1.0000000e-03, 7.0000000e-04, 1.6000000e-03, 2.7000000e-03, 2.1000000e-03, 3.1000000e-03, 1.3000000e-03, 1.1000000e-03, 6.0000000e-04, 1.2000000e-03, 3.0000000e-03, 6.2000000e-03, 3.4000000e-03, 2.0000000e-04, 1.0000000e-04, 1.0000000e-03, 1.0000000e-03, 1.6000000e-03, 7.0000000e-04, 3.4000000e-03, 1.8000000e-03, 1.6000000e-03, 8.0000000e-04, 1.0000000e-04, 1.8600000e-02, 1.3000000e-03, 1.0000000e-04, 4.0000000e-04, 1.5000000e-03, 1.8000000e-03, 3.0000000e-03, 7.6000000e-03, 3.0000000e-04, 6.4000000e-03, 9.0000000e-04, 3.6000000e-03, 5.5000000e-03, 9.5000000e-03, 2.5000000e-03, 4.0000000e-03, 3.3000000e-03, 3.0000000e-04, 3.1000000e-03, 9.5000000e-03, 4.0000000e-03, 9.0000000e-04, 2.6000000e-03, 1.4600000e-02, 0.0000000e+00, 1.3000000e-03, 1.8000000e-01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00 }
        };

    //RC51
    double[] rhs = { 1.09, 2.17, 4.87, 5.2, 0.043, 0.086, 0.023, 0.046, 0.295, 0.36, 0.3, 0.4712, 9.2, 11.5, 6.9 };

    //RC52, 
    //double[] rhs = { 1.28, 2.56, 7.3, 7.81, 0.005, 0.094, 0.031, 0.062, 0.2, 0.24, 0.3, 0.4, 9.8, 16.4, 9.8 };

    //RC53, 
    //double[] rhs = { 1.17, 2.34, 6.94, 7.43, 0.038, 0.076, 0.034, 0.068, 0.085, 0.111, 0.25, 0.4, 11.6, 14.5, 8.7 };

    //RC54, 
    //double[] rhs = { 0.56, 1.12, 3.23, 3.46, 0.018, 0.036, 0.0116, 0.04, 0.25, 0.9, 0.3, 0.4384, 7.47, 9.34, 5.6 };


    public override String name()
    {
        return "RC51";
    }

    public RC51()
    {
        // VAR /1..59/ W;
        double[] x_u = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        double[] x_l = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        
        setDims(x_u, x_l);
    }

    public override bool CheckParticle(PSOTuple pi)
    {
        //RC51-54 Declaration
        double[] x = new double[pi.X.Length];

        for (int iX = 0; iX < pi.X.Length; iX++)
        {
            x[iX] = pi.X[iX];
        }

        double h = 0;
        int gSize = 14;
        double[] g = new double[gSize];

        h += rhs[14];
        for (int i = 0; i < gSize; i++)
        {
            if(i % 2 == 0)
                g[i] = -1 * rhs[i];
            else
                g[i] = rhs[i];
        }

        
        double sum = 0;
        double sumLE17 = 0;
        double sumG11G12 = 0;
        double sumGE34 = 0;
        for (int i = 0; i < x.Length; i++)
        {
            h += x[i] * kg[0, i];
            g[0] += x[i] * kg[3, i];
            g[1] -= x[i] * kg[3, i];
            g[2] += x[i] * kg[2, i];
            g[3] -= x[i] * kg[2, i];
            g[4] += x[i] * kg[4, i];
            g[5] -= x[i] * kg[4, i];
            g[6] += x[i] * kg[5, i];
            g[7] -= x[i] * kg[5, i];
            sum += x[i];
            sumG11G12 += x[i] * kg[1, 0];
            if (i < 17)
                sumLE17 += x[i];
            if (i >= 33)
                sumGE34 += x[i];
        };

        g[8] += sumLE17 / sum;
        g[9] -= sumLE17 / sum;
        g[10] += sumG11G12 / sum;
        g[11] -= sumG11G12 / sum;
        g[12] += sumGE34;
        g[13] -= sumGE34;

        for (int i = 0; i < gSize; i++)
            if (g[i] > 0) return false;
        if (h != 0)
            return false;

        return true;
    }

    public override double GetFitness(PSOTuple pi)
    {
        // RC51-54 Declaration
        double[] x = new double[pi.X.Length];

        for (int iX = 0; iX < pi.X.Length; iX++)
        {
            x[iX] = pi.X[iX];
        }

        /*
        //計算分子
        double Numerator = 0;
        for (int i = 0; i < K.Length; i++)
        {
            double sum = 0;
            for (int j = 0; j < pi.X.Length; j++)
            {
                sum += S[j] * Math.Cos(K[i] * x[j] * Math.PI / 180);
            }
            Numerator += Math.Pow(K[i], -4) * Math.Pow(sum, 2);
        }

        //計算分母
        double Denominator = 0;
        for (int i = 0; i < K.Length; i++)
        {
            Denominator += Math.Pow(K[i], -4);
        }
        Denominator = Denominator * P;
        */

        double fitness = 0;
        for (int i = 0; i < x.Length; i++)
        {
            fitness += x[i]*costs[i];
        }

        return fitness;
    }

};