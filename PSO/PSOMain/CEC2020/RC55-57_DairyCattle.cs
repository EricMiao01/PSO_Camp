using System;
using System.Security.Cryptography;
using PSOLib;

public class RC55 : Problem
{
    double[] costs = { 3.0000000e+02, 1.5000000e+02, 3.5000000e+02, 4.0000000e+02, 5.0000000e+01, 4.0000000e+02, 5.0000000e+02, 4.0000000e+02, 3.8000000e+02, 2.0000000e+03, 1.2000000e+03, 3.9000000e+02, 4.0000000e+02, 4.5000000e+02, 1.5000000e+02, 5.0000000e+02, 6.0000000e+02, 3.5000000e+02, 3.5000000e+02, 1.1000000e+03, 3.9000000e+02, 4.0000000e+01, 2.5000000e+02, 1.3000000e+02, 1.2000000e+02, 1.1000000e+02, 4.0000000e+02, 1.0000000e+02, 3.0000000e+02, 2.5000000e+02, 2.5000000e+02, 4.0000000e+02, 1.6000000e+02, 1.0000000e+01, 4.2000000e+02, 5.5000000e+01, 6.0000000e+01, 5.0000000e+01, 6.0000000e+01, 5.5000000e+01, 3.5000000e+02, 3.5000000e+02, 5.0000000e+02, 5.2000000e+02, 2.0000000e+02, 3.5900000e+02, 7.0000000e+02, 3.0000000e+01, 1.0000000e+02, 5.0000000e+02, 5.6000000e+02, 6.0000000e+01, 4.0000000e+02, 3.0000000e+02, 7.0000000e+02, 9.0000000e+02, 3.5000000e+02, 4.0000000e+02, 1.5000000e+02, 3.8000000e+02, 4.8000000e+02, 3.6000000e+02, 5.0000000e+02, 5.5000000e+02 };

    double[,] kg = new double[13, 64]
        {
            { 4.7000000e-03, 6.7000000e-03, 1.7700000e-02, 6.5000000e-03, 6.5000000e-03, 1.9100000e-02, 1.8800000e-02, 4.7000000e-03, 7.5000000e-03, 0.0000000e+00, 1.1100000e-02, 8.1000000e-03, 1.1200000e-02, 1.1200000e-02, 0.0000000e+00, 2.1200000e-02, 2.2000000e-02, 1.3800000e-02, 1.0700000e-02, 0.0000000e+00, 9.8000000e-03, 1.7300000e-02, 7.6000000e-03, 8.0000000e-03, 8.0000000e-03, 8.0000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 7.0000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 7.0000000e-03, 7.0000000e-03, 6.7000000e-03, 6.7000000e-03, 6.7000000e-03, 7.3000000e-03, 7.3000000e-03, 7.3000000e-03, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.7000000e-02, 1.2600000e-02, 2.0900000e-02, 2.0900000e-02, 6.3000000e-03, 9.9000000e-03, 1.2000000e-02, 1.2000000e-02, 1.9500000e-02, 1.0100000e-02, 1.1000000e-02, 1.0100000e-02, 8.3000000e-03 },
            { 4.5400000e-02, 2.8300000e-02, 3.1700000e-02, 3.0000000e-02, 3.0000000e-02, 5.0500000e-02, 4.3100000e-02, 4.5400000e-02, 3.6700000e-02, 0.0000000e+00, 5.7700000e-02, 3.0700000e-02, 1.6500000e-02, 1.6500000e-02, 0.0000000e+00, 2.0200000e-02, 4.3000000e-02, 3.4700000e-02, 3.1700000e-02, 0.0000000e+00, 3.0000000e-02, 3.6500000e-02, 1.1400000e-02, 2.1300000e-02, 2.1300000e-02, 2.1300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.4300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.4300000e-02, 4.4300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 6.0200000e-02, 6.0200000e-02, 6.0200000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.2300000e-02, 2.1500000e-02, 1.2400000e-02, 1.2400000e-02, 3.8500000e-02, 4.5000000e-02, 2.0600000e-02, 2.0600000e-02, 4.3100000e-02, 7.0600000e-02, 3.1400000e-02, 5.3600000e-02, 6.0800000e-02 },
            { 4.7200000e-02, 2.8300000e-02, 4.7700000e-02, 4.4300000e-02, 4.4300000e-02, 1.1810000e-01, 7.0100000e-02, 4.7200000e-02, 7.7600000e-02, 0.0000000e+00, 6.4200000e-02, 4.8300000e-02, 1.8200000e-02, 1.8200000e-02, 0.0000000e+00, 4.3800000e-02, 7.4000000e-02, 4.4200000e-02, 3.4400000e-02, 0.0000000e+00, 4.3300000e-02, 1.7300000e-02, 1.9000000e-02, 1.8700000e-02, 1.8700000e-02, 1.8700000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.6100000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.6100000e-02, 4.6100000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 6.3900000e-02, 6.3900000e-02, 6.3900000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 4.6900000e-02, 2.6100000e-02, 3.1700000e-02, 3.1700000e-02, 1.0400000e-01, 1.0590000e-01, 4.1500000e-02, 4.1500000e-02, 1.0700000e-01, 9.3700000e-02, 1.0880000e-01, 6.5500000e-02, 7.6900000e-02 },
            { 2.7400000e-02, 2.8300000e-02, 4.9500000e-02, 3.1700000e-02, 3.1700000e-02, 4.1400000e-02, 3.5000000e-02, 2.7400000e-02, 3.7100000e-02, 0.0000000e+00, 3.5600000e-02, 3.1500000e-02, 2.8000000e-02, 2.8000000e-02, 0.0000000e+00, 2.1600000e-02, 3.6000000e-02, 2.9700000e-02, 2.9400000e-02, 0.0000000e+00, 2.8200000e-02, 3.9400000e-02, 3.4200000e-02, 2.1300000e-02, 2.1300000e-02, 2.1300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 3.9200000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 3.9200000e-02, 3.9200000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 5.0000000e-02, 5.0000000e-02, 5.0000000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.4300000e-02, 2.7600000e-02, 2.9300000e-02, 2.9300000e-02, 3.4500000e-02, 3.3900000e-02, 3.1200000e-02, 3.1200000e-02, 4.2200000e-02, 3.5300000e-02, 2.5300000e-02, 3.5200000e-02, 3.0300000e-02 },
            { 4.8600000e-02, 5.4900000e-02, 7.4700000e-02, 4.6100000e-02, 4.6100000e-02, 6.6700000e-02, 6.6400000e-02, 4.8600000e-02, 6.5600000e-02, 0.0000000e+00, 7.1500000e-02, 6.8300000e-02, 1.0730000e-01, 1.0730000e-01, 0.0000000e+00, 7.7000000e-02, 7.4000000e-02, 5.8000000e-02, 1.2820000e-01, 0.0000000e+00, 1.3640000e-01, 6.3500000e-02, 1.4400000e-01, 6.4000000e-02, 6.4000000e-02, 6.4000000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 7.3800000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 7.3800000e-02, 7.3800000e-02, 5.4900000e-02, 5.4900000e-02, 5.4900000e-02, 9.2600000e-02, 9.2600000e-02, 9.2600000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 9.1800000e-02, 8.4600000e-02, 1.6220000e-01, 1.6220000e-01, 6.3300000e-02, 6.3100000e-02, 9.0700000e-02, 9.0700000e-02, 6.8000000e-02, 6.9300000e-02, 6.0600000e-02, 7.2300000e-02, 6.1300000e-02 },
            { 2.4600000e-02, 2.8300000e-02, 4.5700000e-02, 2.6900000e-02, 2.6900000e-02, 4.3400000e-02, 3.2800000e-02, 2.4600000e-02, 3.6800000e-02, 0.0000000e+00, 4.6100000e-02, 3.9200000e-02, 2.6900000e-02, 2.6900000e-02, 0.0000000e+00, 3.8400000e-02, 3.7000000e-02, 3.8400000e-02, 4.2300000e-02, 0.0000000e+00, 3.9800000e-02, 3.6500000e-02, 3.4200000e-02, 2.4000000e-02, 2.4000000e-02, 2.4000000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.4200000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 4.4200000e-02, 4.4200000e-02, 2.8300000e-02, 2.8300000e-02, 2.8300000e-02, 6.0100000e-02, 6.0100000e-02, 6.0100000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 5.7100000e-02, 3.5300000e-02, 4.3400000e-02, 4.3400000e-02, 3.7700000e-02, 3.6200000e-02, 2.7800000e-02, 2.7800000e-02, 5.3700000e-02, 4.0800000e-02, 3.1600000e-02, 4.6500000e-02, 4.2500000e-02 },
            { 3.3000000e-02, 3.8300000e-02, 4.3000000e-02, 4.5000000e-02, 4.5000000e-02, 5.4900000e-02, 4.9600000e-02, 3.3000000e-02, 5.4000000e-02, 0.0000000e+00, 4.9100000e-02, 4.8800000e-02, 3.7500000e-02, 3.7500000e-02, 0.0000000e+00, 0.0000000e+00, 5.4000000e-02, 4.6400000e-02, 4.8700000e-02, 0.0000000e+00, 4.5000000e-02, 5.4800000e-02, 4.5600000e-02, 3.2000000e-02, 3.2000000e-02, 3.2000000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 5.4900000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 5.4900000e-02, 5.4900000e-02, 3.8300000e-02, 3.8300000e-02, 3.8300000e-02, 7.1400000e-02, 7.1400000e-02, 7.1400000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 5.9500000e-02, 3.7800000e-02, 5.0400000e-02, 5.0400000e-02, 5.2700000e-02, 5.0200000e-02, 5.2400000e-02, 5.2400000e-02, 5.7600000e-02, 4.6200000e-02, 3.8200000e-02, 5.0900000e-02, 3.7900000e-02 },
            { 1.8400000e-02, 1.0000000e-02, 1.3000000e-02, 1.8700000e-02, 1.8700000e-02, 2.4000000e-02, 2.5500000e-02, 1.8400000e-02, 2.9600000e-02, 0.0000000e+00, 2.9600000e-02, 2.2900000e-02, 2.0600000e-02, 2.0600000e-02, 0.0000000e+00, 1.8000000e-02, 2.6000000e-02, 2.1000000e-02, 2.0600000e-02, 0.0000000e+00, 2.2300000e-02, 1.8300000e-02, 2.6600000e-02, 1.0700000e-02, 1.0700000e-02, 1.0700000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 1.8100000e-02, 1.8100000e-02, 1.0000000e-02, 1.0000000e-02, 1.0000000e-02, 2.6200000e-02, 2.0000000e-02, 2.6200000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.9000000e-02, 1.4700000e-02, 2.4500000e-02, 2.4500000e-02, 3.1400000e-02, 3.4500000e-02, 1.8200000e-02, 1.8200000e-02, 2.5200000e-02, 2.4800000e-02, 2.1800000e-02, 2.8200000e-02, 2.2700000e-02 },
            { 2.9900000e-02, 3.5000000e-02, 4.1000000e-02, 2.8000000e-02, 2.8000000e-02, 6.5900000e-02, 4.3800000e-02, 2.9900000e-02, 4.5300000e-02, 0.0000000e+00, 4.8100000e-02, 5.6000000e-02, 3.6500000e-02, 3.6500000e-02, 0.0000000e+00, 5.8600000e-02, 4.8000000e-02, 4.6400000e-02, 4.9500000e-02, 0.0000000e+00, 4.8400000e-02, 3.9400000e-02, 4.9000000e-02, 2.9400000e-02, 2.9400000e-02, 2.9400000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 4.9100000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 4.9100000e-02, 4.9100000e-02, 3.5000000e-02, 3.5000000e-02, 3.5000000e-02, 6.3200000e-02, 6.3200000e-02, 6.3200000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 5.3100000e-02, 4.8000000e-02, 6.4800000e-02, 6.4800000e-02, 5.8500000e-02, 5.4700000e-02, 4.2000000e-02, 4.2000000e-02, 5.2500000e-02, 4.6200000e-02, 4.9200000e-02, 4.9400000e-02, 3.8800000e-02 },
            { 1.6400000e-02, 4.5000000e-02, 1.0000000e-02, 1.1000000e-02, 1.1000000e-02, 3.0000000e-03, 8.8000000e-03, 5.3000000e-03, 1.2000000e-02, 0.0000000e+00, 1.6400000e-02, 1.2600000e-02, 3.7000000e-03, 3.7000000e-03, 0.0000000e+00, 1.2800000e-02, 1.0000000e-02, 9.4000000e-03, 7.5000000e-03, 0.0000000e+00, 1.0600000e-02, 1.3500000e-02, 3.8000000e-03, 1.1000000e-03, 1.1000000e-03, 1.1000000e-03, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 2.6500000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 3.1200000e-02, 3.1200000e-02, 4.5000000e-02, 4.5000000e-02, 4.5000000e-02, 1.8400000e-02, 1.8400000e-02, 1.8400000e-02, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.3600000e-02, 1.1200000e-02, 3.7000000e-03, 3.7000000e-03, 1.7400000e-02, 1.7400000e-02, 1.6400000e-02, 1.6400000e-02, 1.6300000e-02, 7.6000000e-03, 9.8000000e-03, 1.6400000e-02, 1.6400000e-02 },
            { 0.0000000e+00, 2.4900000e+00, 3.2200000e+00, 2.6800000e+00, 0.0000000e+00, 0.0000000e+00, 2.5300000e+00, 2.8900000e+00, 0.0000000e+00, 0.0000000e+00, 3.2200000e+00, 3.0400000e+00, 3.1800000e+00, 3.3600000e+00, 2.1700000e+00, 2.6400000e+00, 2.8600000e+00, 3.0400000e+00, 2.7500000e+00, 3.6200000e+00, 3.0700000e+00, 2.3500000e+00, 1.8100000e+00, 0.0000000e+00, 2.3900000e+00, 2.8400000e+00, 2.2100000e+00, 2.0600000e+00, 1.6300000e+00, 1.5900000e+00, 1.4500000e+00, 2.1000000e+00, 0.0000000e+00, 0.0000000e+00, 1.9500000e+00, 1.9200000e+00, 2.6800000e+00, 2.4200000e+00, 0.0000000e+00, 0.0000000e+00, 2.3100000e+00, 2.0300000e+00, 2.1300000e+00, 1.8800000e+00, 0.0000000e+00, 2.1300000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 2.5300000e+00, 2.4200000e+00, 3.0000000e+00, 3.2200000e+00, 3.4400000e+00, 2.7100000e+00, 3.1100000e+00, 3.2500000e+00, 3.2200000e+00, 2.8200000e+00, 3.0000000e+00, 3.0400000e+00, 3.1500000e+00 },
            { 2.2000000e-03, 2.3000000e-03, 1.5000000e-03, 6.8000000e-03, 1.4300000e-02, 1.5000000e-03, 8.0000000e-04, 5.3000000e-03, 1.3000000e-03, 1.2000000e-01, 2.7000000e-03, 5.0000000e-04, 3.0000000e-04, 3.0000000e-04, 1.0000000e-02, 7.0000000e-04, 7.0000000e-04, 7.0000000e-04, 5.0000000e-04, 5.7000000e-03, 7.0000000e-04, 5.2000000e-03, 1.2000000e-03, 2.3000000e-03, 3.1000000e-03, 3.1000000e-03, 3.2000000e-03, 5.8000000e-03, 2.3000000e-03, 1.7000000e-03, 3.0000000e-03, 4.3000000e-03, 3.1000000e-03, 1.3000000e-02, 2.6000000e-03, 5.5000000e-03, 2.7000000e-03, 2.9000000e-03, 0.0000000e+00, 0.0000000e+00, 6.5000000e-03, 5.1000000e-03, 5.1000000e-03, 1.1900000e-02, 1.7400000e-02, 1.3800000e-02, 2.2000000e-01, 3.4000000e-01, 3.8000000e-01, 3.2000000e-01, 1.5000000e-03, 2.9000000e-03, 2.9000000e-03, 7.0000000e-04, 7.0000000e-04, 1.6000000e-03, 2.0000000e-03, 2.6000000e-03, 3.2000000e-03, 4.3000000e-03, 2.6000000e-03, 3.2000000e-03, 4.0000000e-03, 2.9000000e-03 },
            { 8.0000000e-04, 1.1000000e-03, 2.4000000e-03, 1.0000000e-03, 1.1000000e-03, 9.0000000e-04, 1.7300000e-02, 1.8000000e-03, 1.3800000e-02, 0.0000000e+00, 6.5000000e-03, 3.5000000e-03, 3.2000000e-03, 3.1000000e-03, 1.0000000e-03, 3.0000000e-03, 3.6000000e-03, 3.6000000e-03, 3.4000000e-03, 6.0000000e-04, 3.3000000e-03, 2.9000000e-03, 4.0000000e-04, 2.1000000e-03, 2.7000000e-03, 2.7000000e-03, 2.5000000e-03, 3.1000000e-03, 6.0000000e-04, 5.0000000e-04, 7.0000000e-04, 3.2000000e-03, 1.4000000e-03, 3.6000000e-03, 3.0000000e-03, 4.5000000e-03, 3.4000000e-03, 2.8000000e-03, 0.0000000e+00, 0.0000000e+00, 3.2000000e-03, 3.1000000e-03, 2.9000000e-03, 2.4000000e-03, 2.7000000e-03, 2.5000000e-03, 1.9300000e-01, 2.0000000e-04, 7.0000000e-04, 1.8000000e-01, 0.0000000e+00, 7.0000000e-03, 7.0000000e-03, 9.5000000e-03, 6.1000000e-03, 6.2000000e-03, 1.1600000e-02, 8.3000000e-03, 1.4000000e-02, 8.9000000e-03, 4.4000000e-03, 6.6000000e-03, 7.1000000e-03, 7.1000000e-03 }
        };

    int[] index = { 0, 1, 10, 11, 12 };

    //RC55, 
    //double[] rhs = { 0.0218, 0.062, 25.67, 0.034, 0.021, 0.988033 };

    //RC56, 
    //double[] rhs = { 0.066, 0.159, 65.24, 0.103, 0.052, 2.630379 };

    //RC57, 
    double[] rhs = { 0.0259, 0.077, 30.05, 0.096, 0.025, 1.204169 };



    public override String name()
    {
        return "RC55";
    }

    public RC55()
    {
        // VAR /1..64/ W;
        double[] x_u = { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
        double[] x_l = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        
        setDims(x_u, x_l);
    }

    public override bool CheckParticle(PSOTuple pi)
    {
        //RC51-54 Declaration
        double[] x = new double[pi.X.Length];
        
        for (int iX = 0; iX < pi.X.Length; iX++)
        {
            x[iX] = pi.X[iX];
        }


        
        int hSize = 6;
        double[] h = new double[hSize];

        
        //h1 ~ h5
        for (int i = 0; i < hSize-1; i++)
        {
            for (int j = 0; j < x.Length; j++)
            {
                h[i] += x[j] * kg[index[i], j];
            }
            h[i] -= rhs[i];
        };

        //h6
        for (int i = 0; i < x.Length; i++)
        {
            double innerSum = 0;
            for (int j = 0; j < 10; j++)
            {
                innerSum += kg[j, i];
            }
            h[5] = x[i] * innerSum; 
        }
        h[5] -= rhs[5];


        for (int i = 0; i < hSize; i++)
            if (h[i] != 0) return false;

        return true;
    }

    public override double GetFitness(PSOTuple pi)
    {
        // RC51-54 Declaration
        double[] x = new double[pi.X.Length];

        for (int iX = 0; iX < pi.X.Length; iX++)
        {
            x[iX] = pi.X[iX];
        }

        /*
        //計算分子
        double Numerator = 0;
        for (int i = 0; i < K.Length; i++)
        {
            double sum = 0;
            for (int j = 0; j < pi.X.Length; j++)
            {
                sum += S[j] * Math.Cos(K[i] * x[j] * Math.PI / 180);
            }
            Numerator += Math.Pow(K[i], -4) * Math.Pow(sum, 2);
        }

        //計算分母
        double Denominator = 0;
        for (int i = 0; i < K.Length; i++)
        {
            Denominator += Math.Pow(K[i], -4);
        }
        Denominator = Denominator * P;
        */

        double fitness = 0;
        for (int i = 0; i < x.Length; i++)
        {
            fitness += x[i]*costs[i];
        }

        return fitness;
    }

};